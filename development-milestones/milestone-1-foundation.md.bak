# マイルストーン 1: 基盤構築

## ステータス: 🔴 未開始

## 概要
プロジェクトの基盤となる開発環境、データベース、基本的なAPIフレームワークを構築します。

## 期間
- **開始予定**: 2024年3月第1週
- **終了予定**: 2024年3月第2週
- **期間**: 2週間

## 目標
- 開発環境の完全なセットアップ
- データベース接続の確立（PostgreSQL/D1両対応）
- 基本的なAPIエンドポイントの動作確認
- CI/CDパイプラインの基礎構築

## タスクリスト

### Week 1: プロジェクト初期化とインフラ構築

#### Day 1-2: プロジェクトセットアップ
- [ ] package.jsonの作成と依存関係の定義
- [ ] TypeScript設定（tsconfig.json）
- [ ] ESLint/Prettier設定
- [ ] Git フック設定（Husky）
- [ ] 基本的なディレクトリ構造の作成

#### Day 3-4: データベース環境構築
- [ ] PostgreSQL開発環境セットアップ
- [ ] Cloudflare D1開発環境セットアップ
- [ ] データベースアダプターインターフェース定義
- [ ] マイグレーションツールの設定
- [ ] 初期マイグレーションファイルの作成

#### Day 5: 環境設定
- [ ] 環境変数管理（.env.example作成）
- [ ] 開発/ステージング/本番環境の設定分離
- [ ] ロギングシステムの基礎実装
- [ ] エラーハンドリングの基礎実装

### Week 2: APIフレームワークとテスト環境

#### Day 6-7: Honoフレームワーク実装
- [ ] Honoアプリケーションの初期設定
- [ ] ルーティング構造の定義
- [ ] ミドルウェア設定（CORS、認証、ログ）
- [ ] ヘルスチェックエンドポイント実装
- [ ] 基本的なエラーレスポンス形式の定義

#### Day 8-9: データベース接続とORM
- [ ] PostgreSQLアダプター実装
- [ ] D1アダプター実装
- [ ] 接続プーリング設定
- [ ] トランザクション管理の実装
- [ ] 基本的なCRUD操作のテスト

#### Day 10: テストとドキュメント
- [ ] Jestテスト環境設定
- [ ] 単体テストのサンプル作成
- [ ] API仕様書（OpenAPI）の基礎作成
- [ ] 開発者向けREADME作成
- [ ] セットアップガイドの作成

## 成果物

### コード成果物
```
src/
├── adapters/
│   ├── database/
│   │   ├── interface.ts
│   │   ├── postgresql.adapter.ts
│   │   └── d1.adapter.ts
│   └── cache/
│       ├── interface.ts
│       └── kv.adapter.ts
├── config/
│   ├── database.config.ts
│   ├── app.config.ts
│   └── environment.ts
├── middleware/
│   ├── auth.middleware.ts
│   ├── cors.middleware.ts
│   └── logger.middleware.ts
├── routes/
│   ├── health.route.ts
│   └── index.ts
├── utils/
│   ├── logger.ts
│   └── errors.ts
└── index.ts
```

### ドキュメント成果物
- `/docs/setup-guide.md` - 開発環境セットアップガイド
- `/docs/api-specification.yaml` - OpenAPI仕様書（基礎）
- `/docs/database-migration.md` - マイグレーションガイド
- `/.env.example` - 環境変数サンプル

### インフラ成果物
- Docker Compose設定（ローカル開発用）
- GitHub Actions設定（基本的なCI）
- データベーススキーマ（初期版）

## 成功基準

### 必須要件
- ✅ `npm run dev`でローカルサーバーが起動する
- ✅ `/health`エンドポイントが200を返す
- ✅ PostgreSQLとD1の両方でデータベース接続が成功する
- ✅ 基本的なCRUD操作が両データベースで動作する
- ✅ テストが実行でき、すべてパスする

### 品質基準
- TypeScriptのstrictモードでエラーがない
- ESLintエラーがない
- コードカバレッジ > 60%（この段階では）
- すべての関数にTypeScript型定義がある

## 依存関係
- 設計ドキュメントの完成（✅ 完了済み）
- 技術スタックの決定（✅ 完了済み）

## リスクと対策

### リスク1: データベースアダプターの実装複雑性
- **影響**: スケジュール遅延の可能性
- **対策**: 最初はシンプルな実装から始め、段階的に機能追加

### リスク2: 環境差異による問題
- **影響**: 本番環境でのバグ発生
- **対策**: 早期からDocker環境で統一

### リスク3: 依存関係の競合
- **影響**: ビルドエラー
- **対策**: package-lock.jsonの適切な管理

## 次のマイルストーン
[マイルストーン 2: コア機能実装](milestone-2-core.md) - カード・デッキ管理APIの実装